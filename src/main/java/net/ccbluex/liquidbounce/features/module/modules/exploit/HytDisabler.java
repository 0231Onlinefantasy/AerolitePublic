package net.ccbluex.liquidbounce.features.module.modules.exploit;

import io.netty.buffer.Unpooled;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.WorldEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.misc.RandomUtils;
import net.ccbluex.liquidbounce.value.ListValue;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.*;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.LinkedBlockingQueue;

@ModuleInfo(
        name = "HytDisabler2",
        category = ModuleCategory.EXPLOIT
)
public final class HytDisabler extends Module {
    private final Queue<Short> queueID = new ConcurrentLinkedQueue<>();
    private final ListValue modeValue = new ListValue("Mode", new String[]{"Spoof","HuaYuTing"}, "HuaYuTing");
    @EventTarget
    public void onWorld(WorldEvent event) {
        if (event.getWorldClient() != null && !queueID.isEmpty())
            return;
        queueID.clear();
    }
    private LinkedBlockingQueue<C0FPacketConfirmTransaction> C0FQueue = new LinkedBlockingQueue();
    private LinkedBlockingQueue<C00PacketKeepAlive> C00Queue = new LinkedBlockingQueue();
    List<C00PacketKeepAlive> c00= new ArrayList<>();
    List<C03PacketPlayer> c03= new ArrayList<>();
    List<C0FPacketConfirmTransaction> c0f = new ArrayList<>();
    @EventTarget
    public void onPacket(PacketEvent event) {
        if (mc.thePlayer == null || mc.theWorld == null)
            return;
        final Packet<?> packet = event.getPacket();//获取返回的包
        final short uidN = -1;
        if (modeValue.get().equals("HuaYuTing")) {
            if (event != null) {
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction C0F = (C0FPacketConfirmTransaction) event.getPacket();
                    int windowId = C0F.getWindowId();
                    if (windowId == 0 && uidN < 0) {
                        if (mc.thePlayer.ticksExisted % 4 == 0) {
                            event.cancelEvent();
                            c0f.add((C0FPacketConfirmTransaction) event.getPacket());
                            alert("Cancel C0F");
                        } else {
                            if (c0f.size() >= 5) {
                                mc.getNetHandler().addToSendQueue(event.getPacket());
                                c0f.clear();
                            }
                        }
                    }
                }
                if (event.getPacket() instanceof S08PacketPlayerPosLook && mc.thePlayer.hurtTime > 0) {
                    c03.add((C03PacketPlayer) event.getPacket());
                    if (c03.size() >= 5) {
                        alert("Send C03");
                        mc.getNetHandler().addToSendQueue(new C03PacketPlayer(mc.thePlayer.onGround));
                        c03.clear();
                    }
                }
                if (event.getPacket() instanceof S08PacketPlayerPosLook) {
                    mc.timer.timerSpeed = 0.80F;
                } else {
                    mc.timer.timerSpeed = 1.0F;
                }
                if (event.getPacket() instanceof C00PacketKeepAlive) {
                    if (mc.thePlayer.ticksExisted % 4 == 0) {
                        event.cancelEvent();
                        c00.add((C00PacketKeepAlive) event.getPacket());
                        alert("Cancel C00");
                    } else {
                        if (c00.size() >= 5) {
                            c00.clear();
                            mc.getNetHandler().addToSendQueue(new C00PacketKeepAlive(((C00PacketKeepAlive) event.getPacket()).getKey() - RandomUtils.INSTANCE.nextInt(1000, 2147483647)));
                            alert("C00 Key = " + ((C00PacketKeepAlive) event.getPacket()).getKey());


                        }
                    }


                }
                if (packet instanceof C03PacketPlayer && mc.thePlayer.ticksExisted % 4 == 0) {
                    try {
                        ByteArrayOutputStream b = new ByteArrayOutputStream();
                        DataOutputStream _out = new DataOutputStream(b);
                        _out.writeUTF(mc.thePlayer.getGameProfile().getName());
                        PacketBuffer buf = new PacketBuffer(Unpooled.buffer());
                        buf.writeBytes(b.toByteArray());
                        mc.getNetHandler().addToSendQueue(new C17PacketCustomPayload("aac5:resetFlags", buf));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        if (modeValue.get().equals("Spoof")) {
            if (packet instanceof C00PacketKeepAlive) {//心跳包

                if (mc.thePlayer.ticksExisted % 4 == 0) {
                    event.cancelEvent();//解决包
                    C00Queue.offer((C00PacketKeepAlive) packet);//添加
                    if (C00Queue.size() > 5) {
                        if (mc.thePlayer.hurtTime!=0) {
                        }else{
                            mc.getNetHandler().addToSendQueue((Packet) ((C00PacketKeepAlive) this.C00Queue.poll()));//发包
                        }
                        C00Queue.clear();//清理完包

                    }
                }
            }
            if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                C0FPacketConfirmTransaction C0F = (C0FPacketConfirmTransaction) event.getPacket();
                int windowId = C0F.getWindowId();
                short uid = C0F.getUid();
                if (windowId == 0 && uid < 0) {
                    this.C0FQueue.offer((C0FPacketConfirmTransaction) C0F);
                    event.cancelEvent();
                    if (C0FQueue.size() > 5) {
                        if (mc.thePlayer.hurtTime!=0) {

                        }else{
                            mc.getNetHandler().addToSendQueue((Packet) ((C0FPacketConfirmTransaction) this.C0FQueue.poll()));//发包
                        }
                        C0FQueue.clear();//清理完包
                    }
                }
            }
            if (packet instanceof S08PacketPlayerPosLook) {//判断接收到S08包
                alert("[Disabler] Receive S08");
                mc.timer.timerSpeed = 0.8F;
            } else {
                mc.timer.timerSpeed = 1.0F;
            }
            if (packet instanceof C03PacketPlayer && mc.thePlayer.ticksExisted % 4 == 0) {
                try {
                    ByteArrayOutputStream b = new ByteArrayOutputStream();
                    DataOutputStream _out = new DataOutputStream(b);
                    _out.writeUTF(mc.thePlayer.getGameProfile().getName());
                    PacketBuffer buf = new PacketBuffer(Unpooled.buffer());
                    buf.writeBytes(b.toByteArray());
                    mc.getNetHandler().addToSendQueue(new C17PacketCustomPayload("aac5:lags", buf));
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    @Override
    public String getTag() {
        return modeValue.get();
    }
}
