package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.Render3DEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.features.module.modules.render.Breadcrumbs
import net.ccbluex.liquidbounce.utils.render.ColorUtils.rainbow
import net.ccbluex.liquidbounce.utils.render.RenderUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.value.ListValue
import net.minecraft.client.entity.EntityOtherPlayerMP
import net.minecraft.network.Packet
import net.minecraft.network.play.client.*
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition
import net.minecraft.network.play.client.C03PacketPlayer.C06PacketPlayerPosLook
import net.minecraft.network.play.server.S12PacketEntityVelocity
import org.lwjgl.opengl.GL11
import java.awt.Color
import java.util.*

@ModuleInfo(name = "AACHelper", category = ModuleCategory.EXPLOIT)
class AACHelper : Module() {
    private val modeValue = ListValue("Mode", arrayOf("AAC4.3.7", "AAC5Scaffold", "AAC5Velocity"),"AAC4.3.7")
    private val packets: MutableList<Packet<*>> = ArrayList()
    private var fakePlayer: EntityOtherPlayerMP? = null
    private var disableLogger = false
    private val positions = LinkedList<DoubleArray>()
    private val pulseTimer = MSTimer()
    override fun onEnable() {
        if (modeValue.get().equals("AAC4.3.7")) {
            if (mc.thePlayer == null) return
            fakePlayer = EntityOtherPlayerMP(mc.theWorld, mc.thePlayer.gameProfile)
            fakePlayer!!.clonePlayer(mc.thePlayer, true)
            fakePlayer!!.copyLocationAndAnglesFrom(mc.thePlayer)
            fakePlayer!!.rotationYawHead = mc.thePlayer.rotationYawHead
            mc.theWorld.addEntityToWorld(-9100, fakePlayer)
            synchronized(positions) {
                positions.add(
                    doubleArrayOf(
                        mc.thePlayer.posX,
                        mc.thePlayer.entityBoundingBox.minY + mc.thePlayer.getEyeHeight() / 2,
                        mc.thePlayer.posZ
                    )
                )
                positions.add(doubleArrayOf(mc.thePlayer.posX, mc.thePlayer.entityBoundingBox.minY, mc.thePlayer.posZ))
            }
            pulseTimer.reset()
        }
    }

    override fun onDisable() {
            if (mc.thePlayer == null || fakePlayer == null) return
            HuaYuTingHelper()
            mc.theWorld.removeEntityFromWorld(fakePlayer!!.entityId)
            fakePlayer = null
    }

    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (modeValue.get().equals("AAC4.3.7")) {
            if (mc.thePlayer == null || disableLogger) return
            if (packet is C03PacketPlayer) // Cancel all movement stuff
                event.cancelEvent()
            if (packet is C04PacketPlayerPosition || packet is C06PacketPlayerPosLook ||
                packet is C08PacketPlayerBlockPlacement ||
                packet is C0APacketAnimation ||
                packet is C0BPacketEntityAction || packet is C02PacketUseEntity
            ) {
                event.cancelEvent()
                packets.add(packet)
                alert("[AACHelper] Cancled ACTIONS Packet")
            }
        }
        if (modeValue.get().equals("AAC5Scaffold")) {
            if (event.packet is C08PacketPlayerBlockPlacement) {
                mc.netHandler.addToSendQueue(C03PacketPlayer())
                mc.netHandler.addToSendQueue(C07PacketPlayerDigging())
                mc.netHandler.addToSendQueue(C0FPacketConfirmTransaction(0, 0, false))
                alert("[AACHelper] C03 / C0F Sent")
            }
        }
        if (modeValue.get().equals("AAC5Velocity")) {
            if (packet is S12PacketEntityVelocity) {
                packet.motionY = 0.135.toInt()
                alert("[AACHelper] S12 Modified")
            }
        }
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent?) {
        if (modeValue.get().equals("AAC4.3.7")) {
            synchronized(positions) {
                positions.add(
                    doubleArrayOf(
                        mc.thePlayer.posX,
                        mc.thePlayer.entityBoundingBox.minY,
                        mc.thePlayer.posZ
                    )
                )
            }
            if (true && pulseTimer.hasTimePassed(500)) {
                HuaYuTingHelper()
                pulseTimer.reset()
            }
        }
        if (modeValue.get().equals("AAC5Scaffold")) {
            return
        }
    }

    @EventTarget
    fun onRender3D(event: Render3DEvent?) {
        if (modeValue.get().equals("AAC4.3.7")) {
            val breadcrumbs = LiquidBounce.moduleManager.getModule(Breadcrumbs::class.java)
            val color = if (breadcrumbs!!.colorRainbowValue.get()) rainbow() else Color(
                breadcrumbs.colorRedValue.get(), breadcrumbs.colorGreenValue.get(), breadcrumbs.colorBlueValue.get()
            )
            synchronized(positions) {
                GL11.glPushMatrix()
                GL11.glDisable(GL11.GL_TEXTURE_2D)
                GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA)
                GL11.glEnable(GL11.GL_LINE_SMOOTH)
                GL11.glEnable(GL11.GL_BLEND)
                GL11.glDisable(GL11.GL_DEPTH_TEST)
                mc.entityRenderer.disableLightmap()
                GL11.glBegin(GL11.GL_LINE_STRIP)
                RenderUtils.glColor(color)
                val renderPosX = mc.renderManager.viewerPosX
                val renderPosY = mc.renderManager.viewerPosY
                val renderPosZ = mc.renderManager.viewerPosZ
                for (pos in positions) GL11.glVertex3d(pos[0] - renderPosX, pos[1] - renderPosY, pos[2] - renderPosZ)
                GL11.glColor4d(1.0, 1.0, 1.0, 1.0)
                GL11.glEnd()
                GL11.glEnable(GL11.GL_DEPTH_TEST)
                GL11.glDisable(GL11.GL_LINE_SMOOTH)
                GL11.glDisable(GL11.GL_BLEND)
                GL11.glEnable(GL11.GL_TEXTURE_2D)
                GL11.glPopMatrix()
            }
        }
    }

    override val tag: String
        get() = java.lang.String.valueOf(modeValue.get())

    private fun HuaYuTingHelper() {
        try {
            disableLogger = true
            val packetIterator = packets.iterator()
            while (packetIterator.hasNext()) {
                mc.netHandler.addToSendQueue(packetIterator.next())
                packetIterator.remove()
            }
            disableLogger = false
        } catch (e: Exception) {
            e.printStackTrace()
            disableLogger = false
        }
        synchronized(positions) { positions.clear() }
    }
}